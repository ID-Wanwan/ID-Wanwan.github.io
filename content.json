{"meta":{"title":"Wanwan","subtitle":"","description":"","author":"Wanwan","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2019-11-12T06:06:02.000Z","updated":"2019-11-12T06:06:46.498Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-12T06:05:10.000Z","updated":"2019-11-12T06:06:20.075Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"计算机网络知识点总结","slug":"计算机网络知识点总结","date":"2019-11-09T10:52:47.000Z","updated":"2019-11-12T14:17:24.261Z","comments":true,"path":"2019/11/09/计算机网络知识点总结/","link":"","permalink":"http://yoursite.com/2019/11/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","excerpt":"前言&nbsp;&nbsp;&nbsp;&nbsp; 在 Java 开发计算机网络部分的知识中，最重要的就是 TCP/IP 协议栈，本文将从 TCP/IP 协议体系的认知开始，详细讲解四层模型的各大协议及相关知识，突破面试。","text":"前言&nbsp;&nbsp;&nbsp;&nbsp; 在 Java 开发计算机网络部分的知识中，最重要的就是 TCP/IP 协议栈，本文将从 TCP/IP 协议体系的认知开始，详细讲解四层模型的各大协议及相关知识，突破面试。 参考书籍 TCP/IP 详解 卷1：协议 计算机网络：自顶而下方法 TCP/IP 协议体系的认知&nbsp;&nbsp; 1. OSI 协议体系：OSI 协议按照功能不同，将互联网自下而上分成七层模型。 物理层：利用传输介质，为数据链路层提供物理连接。 传送内容为01序列的比特流，传输介质可以是光缆、电缆、双绞线、无线电波。 数据交换设备：集线器、中继器。 数据链路层：对物理层的电信号进行分组，解决两个相邻结点之间的通信问题，为网络层提供服务。 传送的协议数据单元： 数据帧。 数据交换设备： 网桥：将两个 LAN 连起来，根据 MAC 地址转发帧。 交换机：识别数据包中的 MAC 地址信息，根据 MAC 地址进行转发，并将这些 MAC 地址与对应的端口记录在自己内部的一个地址表中。 网络层：解决如何使数据包通过各结点传输的问题，即通过 路由选择算法 将数据包送往目的地，为传输层提供服务。 传送的协议数据单元： 数据包 或 分组。 数据交换设备： 路由器：路由转发、存储转发。 交换机 传输层：为上层协议提供 端到端 的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。 传送的协议数据单元：段。 数据交换设备：网关，在传输层以上实现网络互连，仅用于两个高层协议不同的网络互连，可以是局域网，也可以是广域网。 会话层：管理和协调不同主机上何种进程之间的通信(对话)，即负责建立、管理和中止应用程序之间的会话。 表示层：处理流经节点的数据编码的表示问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出。 应用层：通过应用程序来完成网络用户的应用需求，如文件传输、收发电子邮件等。是用户和网络的接口。 &nbsp;&nbsp;2. TCP/IP 协议体系：&nbsp;&nbsp;&nbsp;&nbsp; TCP/IP 协议族是一个四层协议系统，自底而上分别是数据链路层、网络层、传输层、应用层。每一层都用若干协议来实现不同的功能，上层协议使用下层协议提供的服务。 数据链路层：负责帧数据的传递，经过数据链路层封装的数据称为帧。 常用协议：ARP协议(地址解析协议)、RARP协议(反向地址解析协议)。 网络层：负责数据传递的方式，实现数据包的选路和转发。 常用协议：IP协议、ICMP协议。 传输层：负责传递数据的控制(准确性、安全性)，为两台主机上的应用程序提供 端到端 的通信，不在乎数据包的中转过程。 常用协议：TCP协议、UDP协议。 应用层：负责数据的展示和获取，如文件传输、名称查询和网络管理等。 常用协议：DNS协议、FTP协议、HTTP协议、HTTPS协议。 数据链路层&nbsp;&nbsp;&nbsp;&nbsp; 数据链路层，在物理层所提供的服务的基础上向网络层提供服务，即将原始的、有差错的物理线路改进成为逻辑上无差错的数据链路，从而向网络层提供高质量的服务。它一般包括 3 种基本服务：无确定的无连接服务、有确定的有连接服务、有确定的无连接服务（不存在无确定的有连接服务）。 以太网帧格式&nbsp;&nbsp;&nbsp;&nbsp; 以太网，是一种计算机局域网技术。IEEE 组织的 IEEE 802.3 标准制定了以太网的技术标准，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。它采用 CSMA/CD 媒体接入方法，即带冲突检测的载波侦听多路接入，速率为 10 Mb/s，地址为 48 bit。分为 经典以太网 和 交换式以太网 两大类。 &nbsp;&nbsp;&nbsp;&nbsp; 由于以太网有很多标准，其数据帧格式也有很多，所以这里以 IEEE 802.3 标准来解析以太网帧格式。 字段 字段长度(字节) 说明 前导码(Preamble) 7 同步 帧开始符(SFD) 1 表名下一个字节为目的 MAC 字段 目的地址(DA) 6 目的设备的 MAC 物理地址 源地址(SA) 6 发送设备的 MAC 地址 长度/类型(Length/Type) 2 帧数据字段从长度 / 帧协议类型 数据及填充(data and pad) 46 ~ 1500 帧数据字段，来自高层数据 帧校验序列(FCS) 4 帧数据校验字段，若发生错误，则丢弃此帧 MTU 最大传输单元&nbsp;&nbsp;&nbsp;&nbsp; 以太网帧格式中，帧数据字段的长度被称为最大传输单元，即 MTU。它是指在传输数据过程中允许报文的最大长度，1500字节。 MTU 对 IP协议 的影响（1）IP报文在超过 MTU 之后需要分片，接收端需要组装。（2）分片若丢失，则接收端会组装失败，IP报文相当于传输失败，但IP协议不负责重新传输数据。（3）由于分片，会加大IP报文丢失的可能性。（4）报文的分片和组装由 IP层 独自完成，加大传输成本，降低性能。 MTU 对 UDP协议 的影响（1）UDP协议的报头为固定的 20 字节。（2）若 UDP 数据的长度超过 (1500 - 20) 1480 字节，则数据会在网络层分片。（3）数据的分片会加大数据丢失的可能性。 MTU 对 TCP协议 的影响（1）TCP协议的报头为 20 - 60 字节。（2）若 TCP 报文的总长度超过 1500 字节，则数据同样在网络层会分片。（3）数据分片会加大数据对视的可能性，TCP协议的可靠性降低。 &nbsp;&nbsp; 即由于MTU的存在，对于传输报文长度有限制而导致的分片，会增加数据丢包的可能性，也会降低数据传输的性能，所以在网络中传输数据时尽量将数据的大小控制在不造成分片的最大长度。 ARP 协议&nbsp;&nbsp;&nbsp;&nbsp; ARP协议是 地址解析协议 的缩写，由于在以太网环境中，数据传输所依赖的是 MAC 地址而不是 IP 地址，所以将已知 IP地址 转化为 MAC地址 的工作由 ARP 协议完成。 MAC地址 ：网络中每台设备都有一个唯一的网络标识，这个地址叫 MAC 地址，48 bit，表示为12个16进制数。 ARP 报文格式ARP的请求和应答都是依赖 ARP报文 结构进行的，它放在以太网数据帧中进行发送，下面是 ARP报文 的格式。其在以太网帧结构里封装的格式又为，即以太帧的数据区是ARP请求或响应的报文：在ARP表建立之前，主机并不知道目标的 MAC 地址，所以一开始时只能通过广播的方式将 ARP请求包 发送出去，处于统一局域网的主机都能接收到广播的数据包。 ARP 缓存&nbsp;&nbsp;&nbsp;&nbsp; ARP缓存是一个缓冲区，用来存储 IP地址到MAC地址的映射关系 ，每台主机或路由器都在维护着一个ARP缓存表。本质是 &lt;IP, MAC&gt;的对应表，表中一条记录就是网络上一个主机的 IP地址 和其对应的 MAC地址，我们称之为 ARP表项。 ARP缓存表包含一个 寿命值 TTL，也称作生存时间，它将记录每个 ARP表项的生存时间。生存时间到了就会从缓存表中删除。 当地址解析协议被询问一个已知 IP地址 结点的 MAC地址 时，先在 ARP缓存 中查看，存在则直接返回对应的 MAC地址；不存在，才发送 ARP 请求向局域网查询。 ARP 协议解析过程(查询过程) 每台主机都在自己的 ARP缓冲区 ，建立 ARP缓存表，表示IP地址和MAC地址的对应关系。源主机需要发送数据包时，先在 ARP缓存表 中查询，存在则发送，不存在则在局域网内发起 ARP请求 的广播包查询该 MAC地址。 网络中的 所有主机 收到ARP请求后，检查数据包中的IP地址是否和自己的IP地址一致，不相同忽略该数据包；相同则将 发送端的MAC地址和IP地址 添加到自己的ARP缓存表中，已存在则覆盖，然后向 源主机 发送一个 ARP响应包，告诉它本机的MAC地址。 源主机收到该响应数据包，将 目的主机的MAC地址和IP地址 添加到自己的ARP缓存表中，并利用该信息进行数据传输。如果源主机 没有收到ARP响应数据包，则表示查询失败。 RARP 协议&nbsp;&nbsp;&nbsp;&nbsp; RARP协议，又称反向地址转换协议，可以理解为ARP协议的逆过程，即 将MAC地址转化为IP地址。RARP分组的格式和ARP分组基本一致，工作流程也基本一致，这里就不再详细叙述。 面试题总结 问题1：ARP的作用？答：ARP可以将 IP地址 转化为 MAC地址，即为IP地址到对应的硬件地址提供 动态映射。 问题2：点对点链路使用ARP吗？答：不使用，因为点对点链路的通信双方 已获知彼此的IP地址，不需要ARP协议进行转换。 问题3：ARP高效运行的关键是？答：每台主机都维护着一张 ARP缓存表，ARP地址解析时首先查看的是本主机的 ARP缓存表，发现没有时，再向局域网内广播查询。 问题4：ARP报文的各个字段及含义？答：字段如ARP报文结构图，共28字节，记忆方法：以太网先目的后源，ARP先发送端后目的端，先硬件后协议。 问题5：ARP协议有什么弱点？答：（1）缓存：主机的地址映射是基于缓存表，动态更新的，而地址刷新有 时间限制。可以通过下次更新之前修改计算机的地址缓存，造成 DDos攻击 或 ARP欺骗。（2）广播：攻击者可以伪装 ARP应答。（3）ARP应答没有认证，都是合法的。可以在不接受请求的时候就发出应答包。 问题6：ARP代理的概念和应用场景答：ARP代理：若ARP请求是从一个网络的主机，发送到 另一个网络的主机，那么连接这个两个网络的路由器就可以回答该请求，该过程是ARP代理。ARP代理路由器响应ARP请求的MAC地址为 路由器的MAC地址，而不是ARP请求主机的MAC地址。应用场景：两个物理网络之间的路由，使用相等的网络号，两个路由器使用 ARP 代理，实现相互隐瞒物理网络。 问题7：免费ARP是什么？答：免费ARP：指主机发送 ARP 查找 自己的IP地址，即数据链路层 SIP = DIP。作用：（1）确定是否有其他主机设置了与本机相同的IP地址。（2）如果本机更改MAC地址，可以告知其他主机更新ARP缓存表。 网络层&nbsp;&nbsp;&nbsp;&nbsp; 网络层实现数据包的选路和转发。WAN(广域网) 通常使用众多分级的路由器来连接分散的主机或 LAN(局域网)，因此，通讯的两台主机 一般不是直接相连的，二是通过多个中间结点 (路由器)连接。网络层的任务就是选择这些中间结点，确定两台主机之间的通讯路径。 IP 协议&nbsp;&nbsp;&nbsp;&nbsp; IP协议是 TCP/IP协议族 的核心协议，主要包含两个方面： 1. IP首部格式。 2. IP数据报的路由和转发，即IP选路的实现。 它为上层提供 无状态、无连接、不可靠 的服务。 无状态：指IP通信双方 不同步传输数据的状态信息，因此所有IP数据报的发送、传输、接收都是相互独立的。 优点：简单、高效，通信时无需分配过多资源。 缺点：无法处理乱序、重复的IP数据报。 无连接：指IP通信双方都 不长久地维持双方任何信息，上层协议每次发送数据的时候，都必须明确指定对方的IP地址。 不可靠：指IP协议 不能保证IP数据报准确地到达接收端，很多情况都可以导致IP数据报发送失败，而且IP协议不负责重新传输。因此，使用IP服务的上层协议需要自己实现数据确认、超时重传等机制以达到可靠传输的目的。 IP 报文首部格式&nbsp;&nbsp;&nbsp;&nbsp; 深入剖析IP协议，大部分时间都是深入剖析IP头部协议，因此IP协议可以分为 IPv4 和 IPv6 两大版本来进行分析。 IPv4&nbsp;&nbsp;&nbsp;&nbsp; IPv4中规定IP地址长度为 32， 可提供 $2^{32}$ 个地址，目前已快耗尽。使用地址解析协议 ARP ，其报文首部由 固定部分(20字节) + 可变部分 组成，格式如下，涂色部分需要重点理解： table th:last-of-type { width: 500px; } 字段 位数 描述 版本号 4 通信协议的版本，通信双方的IP协议 必须一致 首部长度 4 在IPv4中规定地址长度为32位(4字节)，IP首部固定20字节，所以4位最大值1111(15)×4 = 60字节。即：IP首部最长60字节，最短20字节。首部长度是 4 字节的整数倍，会自动补齐 服务类型 8 无用，自动占8位 总长度 16 IP数据报 首部 + 数据 的字节总长度。最大值 $2^{16}-1 = 65535$，超出部分会分片 标识 16 IP在存储器中的 IP数据报计数器，每产生一个IP数据报，计数器+1并赋值给标识字段。分片时标识统一复制，重组时相同标识的IP数据报合并 标志 3 一般高两位有用。高位 MF：MF=1，表示后续仍有分片，MF=0，表示这是最后一份分片。中间位 DF：DF 表示 不能分片，DF=0才能分片 片偏移 13 分片后，该片在原分组的相对位置，实际偏移为偏移量左移3位(乘8)后得到。基本单位是 8 字节，即每个分片长度是 8 字节整数倍，不够填充 生存时间 TTL 8 即数据报可以经过路由器的数量，最大值位 $2^{8}-1=255$个 协议 8 区分上层协议，ICMP是1，TCP是6，UDP是17 首部校验和 16 发送端：校验和置0，其他首部数据 反码相加，结果放入校验和；接收端：首部数据和校验和 一起反码相加，结果为0保留数据报，否则丢弃 IP 源地址 32 将网络字节顺序转化位主机字节顺序，即：每4字节，1&lt;-&gt;4，2&lt;-&gt;3，互换 目的地址 32 转换方法和源IP地址一样 IPv6&nbsp;&nbsp;&nbsp;&nbsp; 和 IPv4 相比，IPv6 将原来的 32 位地址空间增大到 128 位，即可以指定 $2^{128}$ 个地址。使用 多点传播 Neighbor Solicitation 消息 取代 ARP 协议，其首部格式变更如下： IPv6首部 IPv4首部 位数 描述 版本 版本 4 IP协议的版本，IPv4为4，IPv6为6 通信量类 服务类型 8 无用，自动占8位 流标号 无 20 准备用于服务质量控制，且 流标号、源地址、目的地址完全一致，才认为是一个流 有效载荷长度 总长度 16 IPv6的 扩展首部 + 数据 长度，即有效载荷长度 下一个首部 协议 8 区分上层协议，通常为TCP或UDP。有扩展首部时，表示第一个扩展首部的协议类型 跳数限制 生存时间TTL 8 IP数据报可经过路由的数量，最大为 255 个 首部长度 首部长度 0 IPv6基本首部长度 固定为40字节 扩展首部 标识，标志，片偏移 0 IPv6中将这三个字段移至扩展首部中 可选字段 可选字段 0 功能归并在扩展首部 首部校验和 首部校验和 0 取消首部校验，加快路由器对数据报的处理速度。在数据链路层，发现差错的帧直接抛弃；运输层中，TCP发现差错会重传，UDP发现差错会抛弃。 IP 分片&nbsp;&nbsp;&nbsp;&nbsp; 当IP数据报的长度超过帧的 MTU 时，它将被分片传输。分片可能发生在传输过程的任何一个结点，只有在目的主机上才会将分片重组。&nbsp;&nbsp;&nbsp;&nbsp; 无论是IPv4协议还是IPv6协议，都在IP首部中提供了IP分片和重组的信息字段：数据报标识、标志、片偏移。 书签TCP/IP协议族体系结构ARP协议详解数据链路层：ARP协议详解（绝对经典）IP协议详解IP协议详解(一)","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP/IP","slug":"TCP-IP","permalink":"http://yoursite.com/tags/TCP-IP/"}]},{"title":"Java自学路线及书籍推荐","slug":"Java自学路线及书籍推荐","date":"2019-11-05T07:12:17.000Z","updated":"2019-11-12T14:04:53.234Z","comments":true,"path":"2019/11/05/Java自学路线及书籍推荐/","link":"","permalink":"http://yoursite.com/2019/11/05/Java%E8%87%AA%E5%AD%A6%E8%B7%AF%E7%BA%BF%E5%8F%8A%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/","excerpt":"基础知识 编程语言：Java Java编程思想， Python， C 基本算法 基本网络知识：TCP/IP， HTTP/HTTPS。 TCP/IP 详解 基本设计模式","text":"基础知识 编程语言：Java Java编程思想， Python， C 基本算法 基本网络知识：TCP/IP， HTTP/HTTPS。 TCP/IP 详解 基本设计模式 工具 操作系统：Linux(CentOS\\Ubuntu\\Fedora) 代码管理：SVN / Git 持续集成(CI/CD)：jenkins Java项目管理工具：Maven / Gradle 框架方面应用层框架 SSH：Spring + Structs + Hibernate，已过时不建议学 SSM：Spring + SpringMVC + Mybatis。 JavaEE框架整合开发入门到实战，这本书讲究入门使用，原理讲的并不深入。 Spring Boot 中间件 MQ 消息队列 RPC 通信框架：gRPC thrift dubbo SpringCloud ElasticSearch 数据库 搜索引擎 数据库 SQL：MySQL / Postgre SQL NoSQL：Redis Memcached MongoDB 架构方面分布式 / 微服务架构 Spring Cloud Dubbo RPC 通信框架 虚拟化 / 容器化技术 Docker 容器化 K8S：kubernetes 关注源码 / 性能 JDK 源码以及部分设计思想 Spring 源码 JVM 细节与排错：深入理解Java虚拟机 高并发 / 高可用：Java并发编程实战，Java并发编程的艺术","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Windows系统下Hexo博客搭建","slug":"Windows系统下Hexo博客搭建","date":"2019-11-05T03:50:26.000Z","updated":"2019-11-12T14:04:31.753Z","comments":true,"path":"2019/11/05/Windows系统下Hexo博客搭建/","link":"","permalink":"http://yoursite.com/2019/11/05/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"前言Hexo 使一个快速简洁的博客框架，可以非常容易搭建起自己的博客，在平时学习工作中便于及时记录知识要点并分享。本文将记录 Windows 系统下 Hexo 博客搭建的流程，帮助更多人搭建个人博客。","text":"前言Hexo 使一个快速简洁的博客框架，可以非常容易搭建起自己的博客，在平时学习工作中便于及时记录知识要点并分享。本文将记录 Windows 系统下 Hexo 博客搭建的流程，帮助更多人搭建个人博客。 Hexo 搭建步骤 安装 Node.js 安装 Git 安装 Hexo 在 Github 中创建个人仓库 将 Hexo 部署到 Github 发布文章 更换 Hexo 主题 安装 Node.js在 Node.js 官网，可以下载到最新版本，当前是 12.13.0。具体安装教程可以参考 Node.js安装及环境配置之Windows篇，需要特别注意环境变量的设置。 安装 Git同样在 Git 官网的下载页面，可以下载 Linux、Windows、mac OS 三个版本的安装包，点击 windows 下载，安装在本地磁盘中。安装完成，点击鼠标右键，若出现 Git GUI Here 和 Git Bash Here，则下载安装成功。后续操作全部在 Git Bash 下执行。 安装 Hexo&nbsp;&nbsp; 1. 首先在任意磁盘新建文件夹 MyBlog，用来统一管理博客。然后在该文件夹下打开 Git Bash，使用命令安装 Hexo，并检查是否安装成功。 npm i -g hexo # 安装 hexohexo -v # 检查 hexo 的版本 &nbsp;&nbsp; 2. 初始化 Hexo。 hexo init &nbsp;&nbsp; 3. 启动 Hexo 本地服务，可以得知服务运行在 http://localhost:4000 上，我们可以通过该网址在本地访问博客。 hexo s &nbsp;&nbsp; 4. 创建一篇博客，文章保存在 /MyBlog/source/_posts，博客内容使用 Markdown 语法编写，这里推荐一款专门编写 Hexo 博客的编辑器 HexoEditor，源项目 可以在 Github 上查看，也可以 直接下载 发布版本。 hexo n &quot;文章名称&quot; &nbsp;&nbsp; 5. 博客编辑完成后，退回至 /MyBlog 文件夹下，使用命令 清空 缓存文件和已经生成的静态文件，然后生成静态文件，从本地进行访问。 hexo clean # 清空缓存hexo g # 生成静态文件 在 Github 中创建个人仓库&nbsp;&nbsp; 1. 首先在 Github 上创建一个新仓库，以如下格式命名： &quot;GitHub_ID&quot;.github.io # 命名格式ID-Wanwan.github.io # 我的GitHub id是 ID-Wanwan， &nbsp;&nbsp; 2. 现在需要将本地博客与 Github 建立关联。在根目录 /MyBlog 下打开 Git Bash，安装插件 hexo-deployer-git。 npm install hexo-deployer-git --save &nbsp;&nbsp; 3. 根目录中有博客配置文件 _config.yml，用文本编辑器打开配置文件，在 # Deployment 下的 deploy 属性中添加如下内容： deploy: type: git repo: https://github.com/ID-Wanwan/ID-Wanwan.github.io.git branch: master 其中 repo 是步骤1中 新建仓库的地址 ，后面再加上 .git 即可。到此本地博客就与 Github 建立了关联，可以进行下一步部署。 将 Hexo 部署在 Github 上&nbsp;&nbsp; 1. 输入部署命令： hexo d 发现出现 Erroe: Spawn failed，根据提示，发现需要设置 Github 的邮箱和用户名信息，来帮助辨认身份并登录到远端的个人仓库。 git config --global user.email &quot;you@example.com&quot; # 设置 Github 邮箱git config --global user.name &quot;Your Name&quot; # 设置 Github 用户名 重新设置完成后，再次输入部署命令 hexo d，然后输入账号密码登录 Github 。 &nbsp;&nbsp; 2. 若运行过程中发现如下错误： error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054 根据查阅资料得知，这是安全设置的问题，解决方式如下： * 首先执行： git config http.sslVerify &quot;false&quot; * 若发现如下错误：fatal：not in a git directory * 执行：git config --globle http.sslVerify &quot;false&quot; 经过如上步骤，再次部署博客 hexo d，Github 仓库中就有刚才发布的博客了。 &nbsp;&nbsp; 3. 在浏览器中输入 Github 博客仓库的名称，即可远端访问博客，部署完成。 https://ID-Wanwan.github.io 发布文章&nbsp;&nbsp; 1. 通过 hexo n &quot;文章名称&quot;，创建一篇新的博客，用文本编辑器编辑文章。&nbsp;&nbsp; 2. 在本地预览博客发布后的样式。 hexo clean # 清空缓存 hexo g # 生成静态文件hexo s # 启动本地服务 &nbsp;&nbsp; 3. 确认无误后，将博客发布到 Github 平台。 hexo d 更换 Hexo 主题&nbsp;&nbsp; 1. 在 Github 或者 Hexo 官网上寻找自己喜欢的博客主题，这里以在 Github 中下载 yilia 主题为例。在本地博客根目录 /MyBlog 下打开 Git Bash，可以以如下格式下载主题： git clone 主题链接.git themes/主题文件夹 # 参考格式git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia &nbsp;&nbsp; 2. 在 /MyBlog/themes 中可以看到刚才下载好的主题， 退回到根目录 /MyBlog，打开配置文件 _config.yml，在 # Extensions 下更改 theme 的值为主题文件夹的名称。 # Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia &nbsp;&nbsp; 3. 更新设置，在本地预览。 hexo clean # 清空缓存 hexo g # 生成静态文件hexo s # 启动本地服务 &nbsp;&nbsp; 4. 确认无误后，部署至 Github 平台，主题更换完成。 hexo d 后记到这里个人博客就已经初步搭建成功，后续可以根据自己的需要更改主题的美化设置，深入探索 Hexo 框架或者其他博客框架的其他内容。 书签HexoEditor 快捷键","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]}